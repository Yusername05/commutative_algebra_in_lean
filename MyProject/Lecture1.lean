
import Mathlib.Tactic

/-
These are the formalisations of some (hopefully eventually all) of the exercises
in Ataiya-Macdonalds's Introduction to Commutative Algebra
-/

namespace Chapter1Exercises

variable (R : Type) [CommRing R]

open Ideal

example (x : R) : x ‚àà jacobson (‚ä• : Ideal R) ‚Üî ‚àÄ y, IsUnit (x * y + 1) := by
  /-
  The math proof:
  (‚Üí) suppose x that 1-xy is not a unit, use zorn's lemma to find a maximal ùì∂ ‚äá (1-xy)
  as x ‚àà ùìô(R) it is in ùì∂ ‚Üí xy ‚àà ùì∂ ‚Üí 1 ‚àà ùì∂ ‚Üí ùì∂ = R, a contradiction.
  (‚Üê) suppose 1-xy a unit but x ‚àâ ùì∂ maximal ‚Üí (x)+ùì∂ = R ‚Üí xy+m=1 ‚àà R for some y ‚àà R and m ‚àà ùì∂
  this gives m = 1-xy a unit, whihc contradicts m ‚àà ùì∂.
  -/
  exact mem_jacobson_bot

open scoped BigOperators

open Finset

example (x : R) : 1 - x = 1 + (-x) := by exact sub_eq_add_neg 1 x

lemma sum_cancel (x : R) : (1 - x) * ‚àë i in range n, x ^ i = 1 - x^n := by
  induction' n with d hd
  ¬∑ simp
  ¬∑ rw [Finset.sum_range_succ, left_distrib, hd, pow_succ]
    ring

theorem exercise_1_1 (x : R) (h : x ‚àà nilradical R): IsUnit (1 - x) := by
  /-
  having 1 + x a unit is the original question, but this is equivalent and easier
  -/
  rw [mem_nilradical, isUnit_iff_exists_inv] at *
  obtain ‚ü®n, h‚ü© := h
  use (‚àë i in range n, x^i)
  rw [sum_cancel]
  simp [h]

open Polynomial

variable (f : R[X])

theorem exercise_1_2_i : IsUnit f ‚Üî IsUnit (coeff f 0) ‚àß ‚àÄ n > 0, IsNilpotent (coeff f n)  := by
  sorry

theorem exercise_1_2_ii : IsNilpotent f ‚Üî ‚àÄ n ‚â• 0, IsNilpotent (coeff f n) := by
  sorry

theorem exercise_1_2_iii : ‚àÉ g, f * g = 0 ‚Üî ‚àÉ (a : R), C a * f = 0 := by
  sorry

/-
Need to introduce a notion for primitive polynomials...
-/

theorem exercise_1_2_iv : IsUnit f ‚Üî IsUnit (coeff f 0) ‚àß (‚àÄ n > 0, IsNilpotent (coeff f n) ) := by
  sorry



theorem exercise_1_4 : jacobson (‚ä• : Ideal R[X]) = nilradical R[X] := by
  sorry

theorem exercise_1_6 (I : Ideal R) (h : ‚àÄ J : Ideal R, J ‚â§ nilradical R ‚Üí ‚àÉ e : R, e ‚àà J ‚àß e^2 = e) : jacobson (‚ä• : Ideal R) = nilradical R := by
  ext x
  constructor
  ¬∑ intro hxJ
    rw [mem_jacobson_bot] at hxJ
    specialize hxJ 1
    rw [isUnit_iff_exists] at hxJ
    rcases hxJ with ‚ü®y, ‚ü®_, hxy‚ü©‚ü©

example : jacobson (‚ä§ : Ideal R) = nilradical R := by
  sorry


  ¬∑ rw []
    have h : ‚ä§ ‚â§ ‚ä• := by
    exact jacobson_mono h --should be an exact of some sort
